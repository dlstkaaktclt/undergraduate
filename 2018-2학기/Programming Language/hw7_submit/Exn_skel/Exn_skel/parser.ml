type token =
  | IF
  | THEN
  | ELSE
  | FN
  | RARROW
  | RAISE
  | HANDLE
  | LET
  | IN
  | PLUS
  | MINUS
  | LP
  | RP
  | EOF
  | EQ
  | NUM of (int)
  | ID of (string)

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* IF *);
  258 (* THEN *);
  259 (* ELSE *);
  260 (* FN *);
  261 (* RARROW *);
  262 (* RAISE *);
  263 (* HANDLE *);
  264 (* LET *);
  265 (* IN *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* LP *);
  269 (* RP *);
    0 (* EOF *);
  270 (* EQ *);
    0|]

let yytransl_block = [|
  271 (* NUM *);
  272 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\001\000\004\000\002\000\003\000\
\006\000\002\000\006\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\003\000\005\000\013\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\022\000"

let yysindex = "\255\255\
\124\255\000\000\124\255\242\254\124\255\244\254\247\254\124\255\
\000\000\000\000\000\000\001\000\036\255\003\255\108\255\253\254\
\000\000\060\255\254\254\000\000\124\255\146\255\124\255\124\255\
\124\255\000\000\124\255\047\255\076\255\108\255\092\255\008\255\
\124\255\124\255\135\255\108\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\065\000\000\000\041\000\
\000\000\000\000\049\000\070\000"

let yygindex = "\000\000\
\000\000\002\000"

let yytablesize = 339
let yytable = "\001\000\
\020\000\014\000\012\000\016\000\013\000\017\000\015\000\024\000\
\003\000\018\000\025\000\000\000\027\000\005\000\019\000\006\000\
\007\000\000\000\007\000\008\000\000\000\021\000\028\000\010\000\
\029\000\030\000\031\000\000\000\032\000\000\000\000\000\000\000\
\008\000\000\000\035\000\036\000\003\000\023\000\000\000\004\000\
\012\000\005\000\019\000\006\000\000\000\000\000\007\000\008\000\
\009\000\021\000\009\000\010\000\005\000\019\000\006\000\000\000\
\010\000\007\000\008\000\000\000\003\000\000\000\000\000\004\000\
\006\000\005\000\019\000\006\000\000\000\011\000\007\000\008\000\
\026\000\021\000\009\000\010\000\003\000\000\000\033\000\004\000\
\000\000\005\000\019\000\006\000\000\000\000\000\007\000\008\000\
\000\000\021\000\009\000\010\000\003\000\000\000\000\000\004\000\
\000\000\005\000\019\000\006\000\034\000\000\000\007\000\008\000\
\000\000\021\000\009\000\010\000\003\000\000\000\000\000\004\000\
\000\000\005\000\019\000\006\000\000\000\000\000\007\000\008\000\
\000\000\021\000\009\000\010\000\003\000\000\000\000\000\004\000\
\000\000\005\000\000\000\006\000\000\000\000\000\007\000\008\000\
\000\000\000\000\009\000\010\000\005\000\019\000\006\000\000\000\
\000\000\007\000\008\000\000\000\021\000\000\000\010\000\005\000\
\019\000\006\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\004\000\000\000\005\000\019\000\
\006\000\000\000\000\000\007\000\008\000\000\000\021\000\009\000\
\010\000\007\000\007\000\007\000\007\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\007\000\007\000\007\000\007\000\
\007\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\000\000\008\000\012\000\012\000\012\000\008\000\008\000\008\000\
\008\000\012\000\009\000\009\000\009\000\012\000\000\000\012\000\
\000\000\009\000\010\000\010\000\000\000\009\000\000\000\009\000\
\000\000\010\000\006\000\006\000\000\000\010\000\000\000\011\000\
\011\000\006\000\000\000\000\000\000\000\006\000\011\000\000\000\
\000\000\000\000\011\000"

let yycheck = "\001\000\
\000\000\016\001\001\000\016\001\003\000\015\001\005\000\005\001\
\001\001\008\000\014\001\255\255\015\001\006\001\007\001\008\001\
\000\000\255\255\011\001\012\001\255\255\014\001\021\000\016\001\
\023\000\024\000\025\000\255\255\027\000\255\255\255\255\255\255\
\000\000\255\255\033\000\034\000\001\001\002\001\255\255\004\001\
\000\000\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\000\000\014\001\015\001\016\001\006\001\007\001\008\001\255\255\
\000\000\011\001\012\001\255\255\001\001\255\255\255\255\004\001\
\000\000\006\001\007\001\008\001\255\255\000\000\011\001\012\001\
\013\001\014\001\015\001\016\001\001\001\255\255\003\001\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\255\255\014\001\015\001\016\001\001\001\255\255\255\255\004\001\
\255\255\006\001\007\001\008\001\009\001\255\255\011\001\012\001\
\255\255\014\001\015\001\016\001\001\001\255\255\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\255\255\014\001\015\001\016\001\001\001\255\255\255\255\004\001\
\255\255\006\001\255\255\008\001\255\255\255\255\011\001\012\001\
\255\255\255\255\015\001\016\001\006\001\007\001\008\001\255\255\
\255\255\011\001\012\001\255\255\014\001\255\255\016\001\006\001\
\007\001\008\001\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\255\255\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\255\255\014\001\015\001\
\016\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\001\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\009\001\002\001\003\001\004\001\013\001\014\001\015\001\
\016\001\009\001\002\001\003\001\004\001\013\001\255\255\015\001\
\255\255\009\001\002\001\003\001\255\255\013\001\255\255\015\001\
\255\255\009\001\002\001\003\001\255\255\013\001\255\255\002\001\
\003\001\009\001\255\255\255\255\255\255\013\001\009\001\255\255\
\255\255\255\255\013\001"

let yynames_const = "\
  IF\000\
  THEN\000\
  ELSE\000\
  FN\000\
  RARROW\000\
  RAISE\000\
  HANDLE\000\
  LET\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  LP\000\
  RP\000\
  EOF\000\
  EQ\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Xexp.xexp) in
    Obj.repr(
# 26 "parser.mly"
                  (_1)
# 202 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Xexp.xexp) in
    Obj.repr(
# 29 "parser.mly"
               (_2)
# 209 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 30 "parser.mly"
        (Xexp.Num _1)
# 216 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 31 "parser.mly"
              (Xexp.Num (- _2))
# 223 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
       (Xexp.Var (_1))
# 230 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 33 "parser.mly"
                      (Xexp.Fn(_2,_4))
# 238 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Xexp.xexp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 34 "parser.mly"
                        (Xexp.App(_1,_2))
# 246 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Xexp.xexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 35 "parser.mly"
                 (Xexp.Equal(_1,_3))
# 254 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Xexp.xexp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Xexp.xexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 36 "parser.mly"
                                (Xexp.If(_2,_4,_6))
# 263 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 37 "parser.mly"
               (Xexp.Raise _2)
# 270 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Xexp.xexp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 38 "parser.mly"
                            (Xexp.App (Xexp.Fn(_2, _6), _4))
# 279 "parser.ml"
               : Xexp.xexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Xexp.xexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Xexp.xexp) in
    Obj.repr(
# 39 "parser.mly"
                         (Xexp.Handle (_1, _3, _4))
# 288 "parser.ml"
               : Xexp.xexp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Xexp.xexp)
;;
