data <- read_csv("Longley.dat", skip = 59, sep = " ")
?read_csv
data <- read_delim("Longley.dat",delim = " ", skip = 59)
data
read.csv("Longley.dat", skip = 59)
data <- read.csv("Longley.dat", skip = 59)
data
View(data)
data <- read.csv("Longley.dat", skip = 59, sep = " ")
data
data <- read.csv("Longley.dat", skip = 59, sep = "t")
data <- read.csv("Longley.dat", skip = 59, sep = "\t")
dat
dtat
data
data <- read.csv("Longley.dat", skip = 59, sep = "\t", strip.white =  TRUE)
dat
data
data <- read.csv("Longley.dat", skip = 59, sep = " ", strip.white =  TRUE)
data
data <- read.csv("Longley.dat", skip = 60, sep = " ", strip.white =  TRUE)
data
data <- read.csv("Longley.dat", skip = 60, strip.white =  TRUE)
data
data <- read.csv("Longley.dat", skip = 60, strip.white = TRUE)
data
data <- read.csv("Longley.dat", skip = 60, sep="")
data
data <- read.csv("Longley.dat", skip = 59, sep="")
data
data <- read.csv("Longley.dat", skip = 60, sep="")
?read.csv
data <- read.csv("Longley.dat", skip = 60, sep="", col.names = c("y", "x1", "x2", "x3", "x4", "x5", "x6'))
data <- read.csv("Longley.dat", skip = 60, sep="", col.names = c("y", "x1", "x2", "x3", "x4", "x5", "x6'))
dat
data <- read.csv("Longley.dat", skip = 60, sep="", col.names = c("y", "x1", "x2", "x3", "x4", "x5", "x6"))
data
header <- read.csv("Longley.dat", skip = 59, sep="", nrows = 1)
header
header <- read.csv("Longley.dat", skip = 59, sep="", nrows = 1, header = TRUE)
header
header <- read.csv("Longley.dat", skip = 59, sep="", nrows = 1, header = FALSE)
header
header <- header[-1]
header
header <- as.vector(header[-1])
header
header <- unname(read.csv("Longley.dat", skip = 59, sep="", nrows = 1, header = FALSE))
header <- header[-1]
header
data <- read.csv("Longley.dat", skip = 60, sep="", col.names = header)
data
header <- as.vector(header[-1])
header
header <- unname(read.csv("Longley.dat", skip = 59, sep="", nrows = 1, header = FALSE))
header <- as.vector(header[-1])
header
header.names
header
data <- read.csv("Longley.dat", skip = 60, sep="", header = FALSE, col.names = header)
data
header <- as.vector(header[-1])
header[1]
header[0]
header <- as.vector(header)
header <- unname(read.csv("Longley.dat", skip = 59, sep="", nrows = 1, header = FALSE))
header <- as.vector(header)
header
length(header)
data <- read.csv("Longley.dat", skip = 60, sep="", header = FALSE, col.names = c("y", "x1", "x2", "x3", "x4", "x5", "x6"))
data
model.matrix(data)
?model.matrix
model.matrix(y ~ x1 + x2 + x3 + x4 + x5 + x6,data = data)
svd(X)
X <- model.matrix(y ~ x1 + x2 + x3 + x4 + x5 + x6,data = data)
X
svd(X)
?svd()
svd_x.d
svd_x$d
svd_x <- svd(X)
svd_x$d
?cond
?kappa
kappa(X)
svd_x$d
G = t(X) %*% X
svd_g = svd(G)
svd_g$d
kappa(G)
library(Rcpp)
library(Matrix)
library(readr)
setRefClass("QRclass",
fields = list(
mat = "matrix",
vec = "vector"
)
)
sudo_sign <- function(x) # it is equal to sign, but when x is 0, it returns 1 to positive sign.
{
if(sign(x) == 0) return(1)
else return(sign(x))
}
householder <- function(qrobj){
if(is.matrix(qrobj$mat))
{
dimension <- dim(qrobj$mat)
n <- dimension[1]
p <- dimension[2]
if(n < p) # X has not full-column rank, we can't House holder.
{
return(NULL)
}
qrobj$vec <- rep(0,p)
for (i in seq_len(p))
{
u <- qrobj$mat[i:n,i]
u[1] <- u[1]+sudo_sign(u[1])*Matrix::norm(Matrix(u), "F")
u_square <- sum(u*u)
for (j in i - 1 + seq_len(max(p - i + 1, 0))) # in-place
{
qrobj$mat[i:n, j] <- qrobj$mat[i:n, j] - 2 * u * sum(u * qrobj$mat[i:n, j]) / u_square
# re-scaling u's size to 1. I use u_square for preserve significant digit.
}
u <- u / u[1] # re-scaling make u[1] size to 1.
qrobj$vec[i] <- sum(u * u) # save u'u 's value.
if(length(u) != 1) # if u's size is 1, we don't need save u's value to X.
{
qrobj$mat[(i+1):n, i] = u[2:length(u)]
}
}
return(qrobj)
}
return(NULL)
}
recoverQ <- function(qrobj)
{
if(is.matrix(qrobj$mat))
{
dimension <- dim(qrobj$mat)
n <- dimension[1]
p <- dimension[2]
if(n < p) # X has not full-column rank, we can't House holder.
{
return(NULL)
}
V = qrobj$mat
V[upper.tri(V, diag = FALSE)] = 0
diag(V) = 1
V <- t(t(V[,1:p])/sqrt(qrobj$vec))  # set V. transpose to divide row by row, and re-transpose.
T = matrix(0, ncol=p, nrow=p) # T_n is T_p
T[1,1] = 2 # set T_1
for(i in 1 + seq_len(p - 1))
{
T[1:(i-1),i] = -2 * T[1:(i-1),1:(i-1)] %*% t(V[,1:(i-1)]) %*% V[,i]
T[i,i] = 2
}
return (diag(1, n)-V %*% T %*% t(V)) # return I - V_n T_n V_n^{t}. (Q)
}
return(NULL)
}
recoverR <- function(qrobj)
{
R = qrobj$mat
R[lower.tri(R, diag = FALSE)] = 0
return(R)
}
v = rep(0,dim(X)[2])
qrobj <- new("QRclass", mat = X, vec=v)
res <- householder(qrobj)
Q<-recoverQ(res)
R<-recoverR(res)
Q
R
Q_1 <- Q[,1:p]
p <- dim(X)[2]
p
Q_1 <- Q[,1:p]
t(Q_1) %*% Q_1
R
R_1 <- R[1:p,]
R_1
?solve
beta_hat = solve(R_1, t(Q_1) %*% y)
y <- data[,1]
y
t(Q_1) %*% y
Q_1 %*% y
beta_hat = solve(R_1, t(Q_1) %*% y)
beta_hat
y <- data[,1]
beta_hat = backsolve(R_1, t(Q_1) %*% y)
beta_hat
?backsolve
backsolve(R_1, diag(p))
R_1_inv = backsolve(t(R_1), diag(p))
R_1_inv
H = Q_1 %*% t(Q_1)
n <- dim(X)[1]
SSE = t(y) %*% (diag(n) - H) %*% y
SSE
MSE = SSE / (n-p)
MSE
R_1_inv = backsolve(t(R_1), diag(p))
G_inv = R_1_inv %*% t(R_1_inv)
var_beta_hat = std * G_inv
var_beta_hat
H = Q_1 %*% t(Q_1)
SSE = t(y) %*% (diag(n) - H) %*% y
MSE = SSE / (n-p)
MSE
std = sqrt(MSE)
std
R_1_inv = backsolve(t(R_1), diag(p))
G_inv = R_1_inv %*% t(R_1_inv)
var_beta_hat = std * G_inv
var_beta_hat
R_1_inv = backsolve(t(R_1), diag(p))
G_inv = R_1_inv %*% t(R_1_inv)
var_beta_hat = as.numeric(std) * G_inv
var_beta_hat
R_1_inv = backsolve(t(R_1), diag(p))
G_inv = R_1_inv %*% t(R_1_inv)
var_beta_hat = as.numeric(MSE) * G_inv
var_beta_hat
var_beta_hat_i = var_beta_hat[diag(p)]
var_beta_hat_i
as.vector(var_beta_hat[diag(p)])
var_beta_hat
var_beta_hat_i = diag(var_beta_hat)
var_beta_hat_i
var_beta_hat_i = diag(var_beta_hat)
var_beta_hat_i
std_beta_hat_i = sqrt(var_beta_hat_i)
std_beta_hat_i
R_1_inv = backsolve(R_1, diag(p))
G_inv = R_1_inv %*% t(R_1_inv)
var_beta_hat = as.numeric(MSE) * G_inv
var_beta_hat
var_beta_hat_i = diag(var_beta_hat)
var_beta_hat_i
std_beta_hat_i = sqrt(var_beta_hat_i)
std_beta_hat_i
data.lm = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6)
data
data.lm = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data)
data.lm
summary(data.lm)
beta_hat
std
std_beta_hat_i
R <- Matrix::chol(G)
R
G
L_t <- Matrix::chol(G)
L <- t(L_t)
z <- forwardsolve(L, t(X) %*% y)
chol_beta_hat <- backwardsolve(L_t, z)
chol_beta_hat
chol_beta_hat <- backsolve(L_t, z)
chol_beta_hat
L_t <- Matrix::chol(G)
L <- t(L_t)
z <- forwardsolve(L, t(X) %*% y)
chol_beta_hat <- backsolve(L_t, z)
chol_beta_hat
L_inv = forwardsolve(L, diag(p))
L_inv
L_inv = forwardsolve(L, diag(p))
chol_MSE = t(y) %*% (diag(n) - X %*% t(L_inv) %*% L_inv %*% t(X)) %*% y / (n-p)
chol_std = sqrt(chol_MSE)
chol_std
L_inv = forwardsolve(L, diag(p))
chol_MSE = t(y) %*% (diag(n) - X %*% t(L_inv) %*% L_inv %*% t(X)) %*% y / (n-p)
chol_std = sqrt(chol_MSE)
chol_MSE
chol_std
var_beta_hat = as.numeric(chol_MSE) * (t(L_inv) %*% L_inv)
var_beta_hat
var_beta_hat_i = diag(var_beta_hat)
var_beta_hat_i
std_beta_hat_i = sqrt(var_beta_hat_i)
std_beta_hat_i
A <- Matrix(c(1,2,3,4), nrow = 2)
library(Matrix)
library(readr)
A <- Matrix(c(1,2,3,4), nrow = 2)
A = Matrix(c(1,2,1,4,5,2,1,3,2), nrow = 3)
R = Matrix(c(0,0,0, -4 , 1.6, 0.4, -1, -0.2, 0.7), nrow = 3)
A
R
b = vector(c(12,19,9))
b = c(12,19,9)
b
A = Matrix(c(1,2,1,4,5,2,1,3,2), nrow = 3)
R = Matrix(c(0,0,0, -4 , 1.6, 0.4, -1, -0.2, 0.7), nrow = 3)
b = c(12,19,9)
D_L_inv = Matrix(c(1,-0.4,-0.1,0,0.2,-0.2,0,0,0.5), nrow = 3)
c = D_L_inv %*% b
c
A = Matrix(c(1,2,1,4,5,2,1,3,2), nrow = 3)
R = Matrix(c(0,0,0, -4 , 1.6, 0.4, -1, -0.2, 0.7), nrow = 3)
b = c(12,19,9)
D_L_inv = Matrix(c(1,-0.4,-0.1,0,0.2,-0.2,0,0,0.5), nrow = 3)
c = D_L_inv %*% b
x_0 = c(1,1,1)
x_1 = R %*% x_0 + c
x_2 = R %*% x_1 + c
x_0
x_1
x_2
diff = x_2 - x_0
euc_norm = sqrt(sum(diff * diff))
diff
euc_norm = sqrt(sum(t(diff) * diff))
euc_norm = sqrt(sum(diff * diff))
euc_norm
diff = x_2 - x_0
euc_norm = sqrt(sum(diff * diff))
diff_12 = x_2 - x_1
euc_norm_12 = sqrt(sum(diff_12 * diff_12))
diff_01 = x-1 - x_0
euc_norm_01 = sqrt(sum(diff_01 * diff_01))
diff_01
diff_12
diff_12 = x_2 - x_1
euc_norm_12 = sqrt(sum(diff_12 * diff_12))
diff_01 = x_1 - x_0
euc_norm_01 = sqrt(sum(diff_01 * diff_01))
euc_norm_01
euc_norm_12
euc_norm
iter_method <- function(x, R, c, n)
{
res <- x
for(i in (1:n))
{
res <- R %*% res + c
}
return(res)
}
euc_norm <- function(x)
{
return(sqrt(sum(x * x)))
}
A = Matrix(c(1,2,1,4,5,2,1,3,2), nrow = 3)
R = Matrix(c(0,0,0, -4 , 1.6, 0.4, -1, -0.2, 0.7), nrow = 3)
b = c(12,19,9)
D_L_inv = Matrix(c(1,-0.4,-0.1,0,0.2,-0.2,0,0,0.5), nrow = 3)
c = D_L_inv %*% b
x_0 = c(1,1,1)
x_1 = iter_method(x_0, R, c , 1)
x_2 = iter_method(x_0, R, c , 2)
x_0
x_1
x_2
diff_12 = x_2 - x_1
euc_norm_12 = euc_norm(diff_12)
diff_01 = x_1 - x_0
euc_norm_01 = euc_norm(diff_01)
euc_norm_01
euc_norm_12
D = diag(A)
D
D = diag(diag(A))
D
L = upper.tri(A)
L
U = A[upper.tri(A)]
U
L = A
L[upper.tri(U, diag = TRUE)] <- 0
L
L
A
upper.tri(U, diag = TRUE)
upper.tri(U, diag = FALSE)
D = diag(diag(A))
L = A
L[upper.tri(L, diag = FALSE)] <- 0
U = A
U[lower.tri(U, diag = FALSE)] <- 0
U
L
D = diag(diag(A))
L = A
L[upper.tri(L, diag = TRUE)] <- 0
U = A
U[lower.tri(U, diag = TRUE)] <- 0
L
U
diag(3)
D_wL_inv = forwardsolve(D + w * L, diag(3))
w <- 0.1
D_wL_inv = forwardsolve(D + w * L, diag(3))
D_wL_inv
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
c_sor = w * D_wL_inv %*% b
y_0 = c(1,1,1)
y_1 = iter_method(x_0, R_sor, c_sor , 1)
y_2 = iter_method(x_0, R_sor, c_sor , 2)
y_0
y_1
y_2
R_sor
iter_method(y_0, R_sor, c_sor, 100)
iter_method(y_0, R_sor, c_sor, 200)
iter_method(y_0, R_sor, c_sor, 300)
iter_method(y_0, R_sor, c_sor, 400)
iter_method(y_0, R_sor, c_sor, 500)
c_sor
w <- 0.1
D = diag(diag(A))
L = A
L[upper.tri(L, diag = TRUE)] <- 0
U = A
U[lower.tri(U, diag = TRUE)] <- 0
D_wL_inv = forwardsolve(D + w * L, diag(3))
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
c_sor = w * D_wL_inv %*% b
y_0 = c(1,1,1)
y_1 = iter_method(y_0, R_sor, c_sor , 1)
y_2 = iter_method(y_0, R_sor, c_sor , 2)
R_sor
y_0
y_1
y_2
iter_method(y_0, R_sor, c_sor, 400)
iter_method(y_0, R_sor, c_sor, 100)
iter_method(y_0, R_sor, c_sor, 1R_sor00)
R_sor
b
D_wL_inv
D_wL_inv %*% b
D_wL_inv %*% Matrix(b, nrow = 3)
iter_method(y_0, R, c, 100)
iter_method(y_0, R, c, 100)
solve(A,b)
solve(A,b)
diag(A)
diag(diag(A))
D_L_inv = forwardsolve(D + L, diag(3))
D_L_inv
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
A = Matrix(c(1,2,1,4,5,2,1,3,2), nrow = 3)
R = Matrix(c(0,0,0, -4 , 1.6, 0.4, -1, -0.2, 0.7), nrow = 3)
b = c(12,19,9)
D = diag(diag(A))
L = A
L[upper.tri(L, diag = TRUE)] <- 0
U = A
U[lower.tri(U, diag = TRUE)] <- 0
L
w <- 0.1
D_wL_inv = forwardsolve(D + w * L, diag(3))
D_wL_inv
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
R_sor
c_sor = w * D_wL_inv %*% b
c_sor
y_0 = c(1,1,1)
y_1 = iter_method(y_0, R_sor, c_sor , 1)
y_2 = iter_method(y_0, R_sor, c_sor , 2)
y_1
y_2
iter_method(y_0, R_sor, c_sor , 1)
iter_method(y_0, R_sor, c_sor , 2)
iter_method(y_0, R_sor, c_sor , 3)
iter_method(y_0, R_sor, c_sor , 10)
iter_method(y_0, R_sor, c_sor , 11)
iter_method(y_0, R_sor, c_sor , 7)
iter_method(y_0, R_sor, c_sor , 5)
iter_method(y_0, R_sor, c_sor , 6)
iter_method(y_0, R_sor, c_sor , 6)R_sor = D_wL_inv %*% ((1-w)*D - w * U)
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
R_sor
iter_method(y_0, R_sor, c_sor , 6)
iter_method(y_0, R_sor, c_sor , 100)
iter_method(y_0, R_sor, c_sor , 500)
D_wL_inv = forwardsolve(D + w * L, diag(3))
D_wL_inv %*% (D + w * L)
D_wL_inv %*% (D + w * L)
R
D_wL_inv = solve(D + w*L)
D_wL_inv
R_sor = D_wL_inv %*% ((1-w)*D - w * U)
R_sor
diff_sor_12 = y_2 - y_1
euc_norm_sor_12 = euc_norm(diff_sor_12)
diff_sor_01 = y_1 - y_0
euc_norm_sor_01 = euc_norm(diff_sor_01)
euc_norm_sor_01
euc_norm_sor_12
diff_12 = x_2 - x_1
euc_norm_12 = euc_norm(diff_12)
diff_01 = x_1 - x_0
euc_norm_01 = euc_norm(diff_01)
euc_norm_01
euc_norm_12
iter_method(y_0, R_sor, c_sor , 5)
iter_method(y_0, R_sor, c_sor , 10)
iter_method(y_0, R_sor, c_sor , 15)
iter_method(y_0, R_sor, c_sor , 7)
iter_method(y_0, R_sor, c_sor , 5)
iter_method(y_0, R_sor, c_sor , 6)
iter_method(y_0, R_sor, c_sor , 5)
iter_method(y_0, R_sor, c_sor , 6)
iter_method(y_0, R_sor, c_sor , 7)
iter_method(y_0, R_sor, c_sor , 10)
