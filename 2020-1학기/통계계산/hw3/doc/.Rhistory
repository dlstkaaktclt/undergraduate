return(beta)
}
IRLS(mydata, formula)
abc <- matrix(1, nrow = 20, ncol = 1)
abc
y <- seq(1,20)
y*abc
?lm
Xmat <- model.matrix(formula, data = mydata) # get model matrix.
data_num <- attr(Xmat, "dim")[1]
data_dim <- attr(Xmat, "dim")[2]
Xmat <- matrix(Xmat, nrow = data_num, ncol = data_dim)
# make matrix form.
name_of_var <- all.vars(formula) # it return all names in formula
y <- mydata[[name_of_var[1]]]
beta0 <- matrix(0, nrow=data_dim, ncol=1)   # initial point
betaold <- beta0
stop <- FALSE
iter <- 1
beta <- beta0
lik <- function(bet)
{
eta <- Xmat %*% bet
print(eta)
return(sum(y * eta) - sum(log(1 + exp(eta))))
}# log-likelihood
#eta = x_i^t B
inv_logit <- function(x){
return(1/(1 + exp(-x)))
}
# it is equal to exp(x)/(1 + exp(x)). for numerical stability, I use above term.
# if x is bigger, then exp(x) ~= 1 + exp(x), which lead to unstability.
likold <- lik(betaold)
eta <- Xmat %*% beta
p <- inv_logit(eta)
w <- p*(1-p) #weight.
p
w
s <- 1.0
z <- eta + s * (y - p)/w  # working response
z
s
(y - p)
(y - p)/w
lm(z ~ x, weights=w)
lm(z ~ Xmat, weights=w)
Xmat
w * Xmat
w %*% Xmat
diag(w) %*% Xmat
w
Xmat
dim(Xmat)
t(Xmat) %*% diag(w)
diag(w)
w
w * Xmat
lapply(Xmat, w)
diag(w)
wv <- as.vector(w)
wv
diag(wv)
lm(z ~ Xmat, weights=as.vector(w))
lm(z ~ Xmat - 1, weights=as.vector(w))
solve((t(Xmat) %*% diag(as.vector(w)) %*% Xmat), t(Xmat) %*% diag(as.vector(w)) %*% z)
IRLS <- function(mydata, formula, maxiter = 1000, tol=1e-6, inner_iter_max = 10)
{
Xmat <- model.matrix(formula, data = mydata) # get model matrix.
data_num <- attr(Xmat, "dim")[1]
data_dim <- attr(Xmat, "dim")[2]
Xmat <- matrix(Xmat, nrow = data_num, ncol = data_dim)
# make matrix form.
name_of_var <- all.vars(formula) # it return all names in formula
y <- mydata[[name_of_var[1]]]
beta0 <- matrix(0, nrow=data_dim, ncol=1)   # initial point
betaold <- beta0
stop <- FALSE
iter <- 1
beta <- beta0
lik <- function(bet)
{
eta <- Xmat %*% bet
return(sum(y * eta) - sum(log(1 + exp(eta))))
}# log-likelihood
#eta = x_i^t B
inv_logit <- function(x){
return(1/(1 + exp(-x)))
}
# it is equal to exp(x)/(1 + exp(x)). for numerical stability, I use above term.
# if x is bigger, then exp(x) ~= 1 + exp(x), which lead to unstability.
likold <- lik(betaold)
while ((!stop) && (iter < maxiter)) {
eta <- Xmat %*% beta
p <- inv_logit(eta)
w <- p*(1-p) #weight.
# line search by step halving
s <- 1.0
for (i in seq_len(inner_iter_max)) {
z <- eta + s * (y - p)/w  # working response
m <- lm(z ~ Xmat - 1, weights=as.vector(w))  # weighted least squares. it is eqaul to solve((t(Xmat) %*% diag(as.vector(w)) %*% Xmat), t(Xmat) %*% diag(as.vector(w)) %*% z)
beta <- as.matrix(coef(m))
curlik <- lik(beta)
if (curlik > likold) break
s <- s * 0.5
}
betadiff <- beta - betaold
if (norm(betadiff, "F") < tol) stop <- TRUE
likold <- curlik
betaold <- beta
iter <- iter + 1
}
return(beta)
}
IRLS(mydata, formula)
fit.glm <- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
model.matrix(fit.glm)
summary(fit.glm)
IRLS(mydata, formula)
res <- IRLS(mydata, formula)
attributes(res)
unname(res)
summary(fit.glm)
fit.glm
coef(fit.glm)
res_glm <- coef(fit.glm)
res_irls <- IRLS(mydata, formula)
res_irls
res_irls - res_glm
seq.int
seq.int(1,5,length.out = 3)
seq.int(1,5,length.out = 10)
rectangular <- function(f, a, b, n) {
h <- (b - a) / n
xi <- seq.int(a, b, length.out = n + 1)
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n-1} = h(sum(f(x_0) + ... f(x_n-1))), x_0 = a
intgrl <- h * sum(f(xi))
return(intgrl)
}
rectangular(exp, 0, 1, 100)
seq.int(1,5,3*2+1)
seq.int(1,5,length.out = 3*2+1)
seq_len(10)
(1+2)//2
(1+2)%/%2
simpson <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
i <- seq_len(interval_num - 1)
xi <- a + i * h
# get xi. it removes endpoint of interval, a, b
xmid <- c(xi - h / 2, b - h / 2)
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- h * (f(a) + 2 * sum(f(xi)) + 4 * sum(f(xmid)) + f(b)) / 6
return(intgrl)
}
simpson <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
i <- seq_len(interval_num - 1)
xi <- a + i * h
# get xi. it removes endpoint of interval, a, b
xmid <- c(xi - h / 2, b - h / 2)
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
print(xi)
print(xmid)
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- h * (f(a) + 2 * sum(f(xi)) + 4 * sum(f(xmid)) + f(b)) / 6
return(intgrl)
}
simpson(exp,0,10,5)
simpson(exp,0,10,6)
simpson(exp,0,10,99)
rectangular(ex_func,0,1,10)
trapezoidal(ex_func,0,1,10)
simpson(ex_func,0,1,10)
rectangular <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- seq.int(a, b, length.out = n + 2)
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n} = h(sum(f(x_0) + ... f(x_n))), x_0 = a, x_{n+1} = b
intgrl <- h * sum(f(xi))
return(intgrl)
}
trapezoidal <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- seq.int(a, b, length.out = n + 2)
xi <- xi[-1]
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n} = h/2 * (f(x_0) + 2f(x_1) + .. + 2f(x_n) + f(x_n+1), x_0 = a, x_n+1 = b
intgrl <- h * (0.5 * f(a) + sum(f(xi)) + 0.5 * f(b))
return(intgrl)
}
simpson <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
i <- seq_len(interval_num - 1)
xi <- a + i * h
# get xi. it removes endpoint of interval, a, b
xmid <- c(xi - h / 2, b - h / 2)
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- h * (f(a) + 2 * sum(f(xi)) + 4 * sum(f(xmid)) + f(b)) / 6
return(intgrl)
}
ex_func <- function(x)
{
return(exp(x))
}
rectangular(ex_func,0,1,10)
trapezoidal(ex_func,0,1,10)
simpson(ex_func,0,1,10)
true_val <- exp(1) - 1
true_val <- exp(1) - 1
true_val
rectangular(ex_func,0,1,10)
trapezoidal(ex_func,0,1,10)
simpson(ex_func,0,1,10)
simpson <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
i <- seq_len(interval_num - 1)
xi <- a + i * h
# get xi. it removes endpoint of interval, a, b
xmid <- c(xi - h / 2, b - h / 2)
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- h * (f(a) + 2 * sum(f(xi)) + 4 * sum(f(xmid)) + f(b)) / 6
return(intgrl)
}
rectangular(ex_func,0,1,10)
trapezoidal(ex_func,0,1,10)
simpson(ex_func,0,1,10)
rectangular(ex_func,0,1,30)
trapezoidal(ex_func,0,1,30)
simpson(ex_func,0,1,30)
rectangular(ex_func,0,1,1000)
rectangular(ex_func,0,1,10000)
rectangular(ex_func,0,1,100000)
rectangular(ex_func,0,1,1000000)
rectangular(ex_func,0,1,10000000)
xi <- vector(length = 3)
xi
integral <- function(f, a, b, n ,method)
{
return(method(f,a,b,n))
}
rectangular_vec <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- seq.int(a, b, length.out = n + 2)
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n} = h(sum(f(x_0) + ... f(x_n))), x_0 = a, x_{n+1} = b
intgrl <- h * sum(f(xi))
return(intgrl)
}
rectangular_vec <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- seq.int(a, b, length.out = n + 2)
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n} = h(sum(f(x_0) + ... f(x_n))), x_0 = a, x_{n+1} = b
intgrl <- h * sum(f(xi))
return(intgrl)
}
rectangular_for <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- vector(length = n)
for(i in seq_len(n))
{
xi[i] <- a + i*h
}
# get xi. it removes endpoint of interval, a, b.
#sum I_0 + ... I_{n} = h(sum(f(x_0) + ... f(x_n))), x_0 = a, x_{n+1} = b
intgrl <- f(a)
for(i in seq_len(n))
{
intgrl <- intgrl + f(xi[i])
}
intgrl <- h * intgrl
return(intgrl)
}
trapezoidal_vec <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- seq.int(a, b, length.out = n + 2)
xi <- xi[-1]
xi <- xi[-length(xi)]
# get xi. it removes right endpoint of interval, b.
#sum I_0 + ... I_{n} = h/2 * (f(x_0) + 2f(x_1) + .. + 2f(x_n) + f(x_n+1), x_0 = a, x_n+1 = b
intgrl <- h * (0.5 * f(a) + sum(f(xi)) + 0.5 * f(b))
return(intgrl)
}
trapezoidal_for <- function(f, a, b, n) {
h <- (b - a) / (n + 1)
xi <- vector(length = n)
for(i in seq_len(n))
{
xi[i] <- a + i*h
}
# get xi. it removes endpoint of interval, a, b.
#sum I_0 + ... I_{n} = h/2 * (f(x_0) + 2f(x_1) + .. + 2f(x_n) + f(x_n+1)), x_0 = a, x_n+1 = b
intgrl <- (f(a) + f(b))/2
for(i in seq_len(n))
{
intgrl <- intgrl + f(xi[i])
}
intgrl <- h * intgrl
return(intgrl)
}
simpson_vec <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
i <- seq_len(interval_num - 1)
xi <- a + i * h
# get xi. it removes endpoint of interval, a, b
xmid <- c(xi - h / 2, b - h / 2)
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- h * (f(a) + 2 * sum(f(xi)) + 4 * sum(f(xmid)) + f(b)) / 6
return(intgrl)
}
simpson_for <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
xi <- vector(length = interval_num - 1)
xmid <- vector(length = inverval_num)
for(i in seq_len(n))
{
xi[i] <- a + i*h
}
h <- (b - a) / interval_num
for(i in seq_len(interval_num - 1))
{
xi[i] <- a + i*h # get xi. it removes endpoint of interval, a, b
xmid[i] <- xi[i]-(h / 2)
}
xmid[interval_num] = b - h / 2
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- f(a) + f(b) + 4 * f(xmid[interval_num])
for(i in seq_len(interval_num - 1))
{
intgrl <- intgrl + 2 * f(xi[i]) + 4 * f(xmid[i])
}
intgrl <- intgrl * h / 6
return(intgrl)
}
integral(ex_func, 0, 1, 10 ,rectangular_vec)
integral(ex_func, 0, 1, 10 ,rectangular_for)
integral(ex_func, 0, 1, 10 ,trapezoidal_vec)
integral(ex_func, 0, 1, 10 ,trapezoidal_for)
integral(ex_func, 0, 1, 10 ,simpson_vec)
integral(ex_func, 0, 1, 10 ,simpson_for)
simpson_for <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
xi <- vector(length = interval_num - 1)
xmid <- vector(length = interval_num)
for(i in seq_len(n))
{
xi[i] <- a + i*h
}
h <- (b - a) / interval_num
for(i in seq_len(interval_num - 1))
{
xi[i] <- a + i*h # get xi. it removes endpoint of interval, a, b
xmid[i] <- xi[i]-(h / 2)
}
xmid[interval_num] = b - h / 2
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- f(a) + f(b) + 4 * f(xmid[interval_num])
for(i in seq_len(interval_num - 1))
{
intgrl <- intgrl + 2 * f(xi[i]) + 4 * f(xmid[i])
}
intgrl <- intgrl * h / 6
return(intgrl)
}
integral(ex_func, 0, 1, 10 ,rectangular_vec)
integral(ex_func, 0, 1, 10 ,rectangular_for)
integral(ex_func, 0, 1, 10 ,trapezoidal_vec)
integral(ex_func, 0, 1, 10 ,trapezoidal_for)
integral(ex_func, 0, 1, 10 ,simpson_vec)
integral(ex_func, 0, 1, 10 ,simpson_for)
simpson_for <- function(f, a, b, n) {
interval_num = (n+1) %/% 2
h <- (b - a) / interval_num
xi <- vector(length = interval_num - 1)
xmid <- vector(length = interval_num)
for(i in seq_len(n))
{
xi[i] <- a + i*h
}
for(i in seq_len(interval_num - 1))
{
xi[i] <- a + i*h # get xi. it removes endpoint of interval, a, b
xmid[i] <- xi[i]-(h / 2)
}
xmid[interval_num] = b - h / 2
# get xmid, midpoint of xi. it removes endpoint of interval, a, b
#sum I_0 + ... I_{n} = h/6 * (f(x_0) + 4f({x_0 + x_1}/2) +2f(x_1) + 4f({x_1 + x_2}/2) + 2f(x_2) + ...   .. + 4f({x_n-1 + x_n}/2) + f(x_n+1)) x_0 = a, x_{n+1} = b
intgrl <- f(a) + f(b) + 4 * f(xmid[interval_num])
for(i in seq_len(interval_num - 1))
{
intgrl <- intgrl + 2 * f(xi[i]) + 4 * f(xmid[i])
}
intgrl <- intgrl * h / 6
return(intgrl)
}
integral(ex_func, 0, 1, 10 ,rectangular_vec)
integral(ex_func, 0, 1, 10 ,rectangular_for)
integral(ex_func, 0, 1, 10 ,trapezoidal_vec)
integral(ex_func, 0, 1, 10 ,trapezoidal_for)
integral(ex_func, 0, 1, 10 ,simpson_vec)
integral(ex_func, 0, 1, 10 ,simpson_for)
three_func <- function(x){
return(exp(-x))
}
integral(three_func, 0, 2, 10 ,rectangular_vec)
integral(three_func, 0, 2, 10 ,trapezoidal_vec)
integral(three_func, 0, 2, 10 ,simpson_vec)
three_func <- function(x){
return(exp(-x))
}
integral(three_func, 0, 2, 10 ,rectangular)
integral(three_func, 0, 2, 10 ,trapezoidal)
integral(three_func, 0, 2, 10 ,simpson)
true_val <- 1 - exp(-2)
true_val
true_val
integral(three_func, 0, 2, 10 ,rectangular)
integral(three_func, 0, 2, 10 ,trapezoidal)
integral(three_func, 0, 2, 10 ,simpson)
integral(three_func, 0, 2, 5 ,rectangular)
integral(three_func, 0, 2, 5 ,trapezoidal)
integral(three_func, 0, 2, 5 ,simpson)
integral(three_func, 0, 2, 7 ,rectangular)
integral(three_func, 0, 2, 7 ,trapezoidal)
integral(three_func, 0, 2, 7 ,simpson)
integral(three_func, 0, 2, 10 ,rectangular)
integral(three_func, 0, 2, 10 ,trapezoidal)
integral(three_func, 0, 2, 10 ,simpson)
true_val - integral(three_func, 0, 2, 50 ,simpson)
3**(-2)
3**(-3/2)
trans_func <- function(x)
{
return(exp(-1/x) *( x**(-3/2) ))
}
integrate(trans_func, 0, 1)
integral(four_func, 0, 2, 50 ,rectangular)
integral(four_func, 0, 2, 50 ,trapezoidal)
integral(four_func, 0, 2, 50 ,simpson)
four_func <- function(x)
{
return(exp(-1/x) *( x**(-3/2) ))
}
integral(four_func, 0, 2, 50 ,rectangular)
integral(four_func, 0, 2, 50 ,trapezoidal)
integral(four_func, 0, 2, 50 ,simpson)
?integrate
integrate
four_func <- function(x)
{
return(exp(-1/x) *( x**(-3/2) ))
}
four_func <- function(x)
{
print(x)
return(exp(-1/x) *( x**(-3/2) ))
}
integrate(four_func,0,1)
즉, [a,b] interval이 $[x_0, x_1], ... [x_{n-1}, x_n]$, $x_0 = a, x_n = b$인 경우, f(x_0)의 값이 존재하지 않으면,
is.numeric(NA)
is.numeric(NaN)
is.finite(NaN)
adv_integral(four_func, 0, 2, 50 ,rectangular)
adv_integral(four_func, 0, 2, 50 ,trapezoidal)
adv_integral(four_func, 0, 2, 50 ,simpson)
adv_integral <- function(f, a, b, n ,method)
{
h <- (b - a) / (n + 1)
if(is.finite(f(a)) && is.finite(f(b)))
{
return(method(f,a,b,n))
}
else if(is.finite(f(a)))
{
return(h * f(b-h) + method(f,a,b-h,n-1))
}
else if(is.finite(f(b)))
{
return(h * f(a+h) + method(f,a+h,b,n-1))
}
else
{
return(h * (f(a+h) + f(b-h)) + method(f,a+h, b-h, n-2))
}
}
adv_integral(four_func, 0, 2, 50 ,rectangular)
adv_integral(four_func, 0, 2, 50 ,trapezoidal)
adv_integral(four_func, 0, 2, 50 ,simpson)
four_func <- function(x)
{
return(exp(-1/x) *( x**(-3/2) ))
}
adv_integral(four_func, 0, 2, 50 ,rectangular)
adv_integral(four_func, 0, 2, 50 ,trapezoidal)
adv_integral(four_func, 0, 2, 50 ,simpson)
