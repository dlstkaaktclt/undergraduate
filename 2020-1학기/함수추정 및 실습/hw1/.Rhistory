plot(x, bias_ey ,ylim = c(-0.5,0.5), xlab = "X", ylab = "Bias", type = "l")
plot(x, var_ey ,ylim = c(0,0.5), xlab = "X", ylab = "Var", type = "l")
plot(x, mse_ey, ylim = c(0,0.5), xlab = "X", ylab = "MSE", type = "l")
}
plot(seq(1,10),rnorm(10))
plot(seq(1,10),rnorm(10), colors = "red")
?plot
draw_spline <- function(x, true_func, err_sd = 0.5, n = 40, lamb = 1e-10)
{
y <- matrix(nrow = length(x), ncol = n)
ey <- matrix(nrow = length(x), ncol = n)
for(i in seq_len(n)) # save ey to columns
{
e <- rnorm(length(x), mean = 0, sd = err_sd)
y[,i] <- true_func(x) + e
fit.sp <- smooth.spline(x, y[,i], lambda = lamb, all.knots = T)
ey[,i] <- fitted(fit.sp)
}
mean_ey <- rowMeans(ey)
mean_true <- true_func(x)
bias_ey <- mean_ey - mean_true
var_ey <- rowSums((ey - mean_ey)**2) / (n - 1)
mse_ey <- bias_ey**2 + var_ey
par(mfrow=c(2,2),cex=.8)
plot(x, mean_true ,ylim = c(-3,3), xlab = "X", ylab = "Y", type = "l", col = "red")
for(i in seq_len(n))
{
lines(x, ey[,i])
}
plot(x, bias_ey ,ylim = c(-0.5,0.5), xlab = "X", ylab = "Bias", type = "l")
plot(x, var_ey ,ylim = c(0,0.5), xlab = "X", ylab = "Var", type = "l")
plot(x, mse_ey, ylim = c(0,0.5), xlab = "X", ylab = "MSE", type = "l")
}
x <- seq(1,20) # 1,2,...20
draw_spline(x, my_func, lamb = 1e-10)
draw_spline <- function(x, true_func, err_sd = 0.5, n = 40, lamb = 1e-10)
{
y <- matrix(nrow = length(x), ncol = n)
ey <- matrix(nrow = length(x), ncol = n)
for(i in seq_len(n)) # save ey to columns
{
e <- rnorm(length(x), mean = 0, sd = err_sd)
y[,i] <- true_func(x) + e
fit.sp <- smooth.spline(x, y[,i], lambda = lamb, all.knots = T)
ey[,i] <- fitted(fit.sp)
}
mean_ey <- rowMeans(ey)
mean_true <- true_func(x)
bias_ey <- mean_ey - mean_true
var_ey <- rowSums((ey - mean_ey)**2) / (n - 1)
mse_ey <- bias_ey**2 + var_ey
par(mfrow=c(2,2),cex=.8)
plot(x, mean_true ,ylim = c(-3,3), xlab = "X", ylab = "Y", type = "l", col = "red")
for(i in seq_len(n))
{
lines(x, ey[,i])
}
lines(x, mean_true, col = "red")
plot(x, bias_ey ,ylim = c(-0.5,0.5), xlab = "X", ylab = "Bias", type = "l")
plot(x, var_ey ,ylim = c(0,0.5), xlab = "X", ylab = "Var", type = "l")
plot(x, mse_ey, ylim = c(0,0.5), xlab = "X", ylab = "MSE", type = "l")
}
x <- seq(1,20) # 1,2,...20
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-5)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-5)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-5)
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-5)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-4)
draw_spline(x, my_func, lamb = 1e-5)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-1)
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-10)
draw_spline(x, my_func, lamb = 1e-3)
draw_spline(x, my_func, lamb = 1e-1)
bw <- 0.18
# (4)
ex <- seq(from = 0.1, to = 3., by = 0.1)
draw_nadaraya <- function(x, true_func, err_sd = 0.5, n = 40, bw = 0.18)
{
y <- matrix(nrow = length(x), ncol = n)
ey <- matrix(nrow = length(x), ncol = n)
bwsplus <- bw/0.3708159
for(i in seq_len(n)) # save ey to columns
{
e <- rnorm(length(x), mean = 0, sd = err_sd)
y[,i] <- true_func(x) + e
fit.ks <- ksmooth(x, y[,i], kernel = "normal", bandwidth = bwsplus, x.points = x)
ey[,i] <- fit.ks$y
}
mean_ey <- rowMeans(ey)
mean_true <- true_func(x)
bias_ey <- mean_ey - mean_true
var_ey <- rowSums((ey - mean_ey)**2) / (n - 1)
mse_ey <- bias_ey**2 + var_ey
par(mfrow=c(2,2),cex=.8)
plot(x, mean_true ,ylim = c(-3,3), xlab = "X", ylab = "Y", type = "l", col = "red")
for(i in seq_len(n))
{
lines(x, ey[,i])
}
lines(x, mean_true, col = "red")
plot(x, bias_ey ,ylim = c(-0.5,0.5), xlab = "X", ylab = "Bias", type = "l")
plot(x, var_ey ,ylim = c(0,0.5), xlab = "X", ylab = "Var", type = "l")
plot(x, mse_ey, ylim = c(0,0.5), xlab = "X", ylab = "MSE", type = "l")
}
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 1.8)
draw_nadaraya(x, my_func, bw = 0.018)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 1.8)
draw_nadaraya(x, my_func, bw = 18)
draw_nadaraya(x, my_func, bw = 1.8)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 18)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 1.8)
draw_nadaraya(x, my_func, bw = 18)
draw_nadaraya(x, my_func, bw = 0.18)
ㅍ
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 0.18)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 1)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 0.5)
draw_nadaraya(x, my_func, bw = 3)
draw_nadaraya(x, my_func, bw = 1)
bandw = seq(from = 0.01, to = 1, by = 0.01)
bandw
bandw = seq(from = 0.01, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
func_B(x, y, length(x), bandw, 0)
func_B <- function(x1, y1, nd, bandw, ntrial)
{
#   (1)
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(cv, gcv)
}
#   (8)
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x1, y1 = y1)
cvgcv <- unlist(cvgcv)
cv <- cvgcv[attr(cvgcv, "names") == "cv"]
gcv <- cvgcv[attr(cvgcv, "names") == "gcv"]
#   (9)
return(cv, gcv)
}
bandw = seq(from = 0.01, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
cv, gcv <- func_B(x, y, length(x), bandw, 0)
bandw = seq(from = 0.01, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
func_B <- function(x1, y1, nd, bandw, ntrial)
{
#   (1)
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(c(cv, gcv))
}
#   (8)
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x1, y1 = y1)
cvgcv <- unlist(cvgcv)
cv <- cvgcv[attr(cvgcv, "names") == "cv"]
gcv <- cvgcv[attr(cvgcv, "names") == "gcv"]
#   (9)
return(c(cv, gcv))
}
bandw = seq(from = 0.01, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
cv, gcv <- func_B(x, y, length(x), bandw, 0)
bandw = seq(from = 0.01, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(c(cv, gcv))
}
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x, y1 = y)
cvgcv
cvgcv <- unlist(cvgcv)
cvgcv
cv <- cvgcv[seq(from = 1, to = 2*length(bandw), by = 2)]
gcv <- cvgcv[seq(from = 2, to = 2*length(bandw), by = 2)]
cv
gcv
func_B <- function(x1, y1, nd, bandw, ntrial)
{
#   (1)
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(c(cv, gcv))
}
#   (8)
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x1, y1 = y1)
cvgcv <- unlist(cvgcv)
cv <- cvgcv[seq(from = 1, to = 2*length(bandw), by = 2)]
gcv <- cvgcv[seq(from = 2, to = 2*length(bandw), by = 2)]
#   (9)
return(c(cv, gcv))
}
bandw = seq(from = 0.1, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
lst <- list()
lst["x"] = 1
lst
lst$x
func_B <- function(x1, y1, nd, bandw, ntrial)
{
#   (1)
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(c(cv, gcv))
}
#   (8)
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x1, y1 = y1)
cvgcv <- unlist(cvgcv)
cv <- cvgcv[seq(from = 1, to = 2*length(bandw), by = 2)]
gcv <- cvgcv[seq(from = 2, to = 2*length(bandw), by = 2)]
#   (9)
retval <- list()
retval["cv"] <- cv
retval["gcv"] <- gcv
return(retval)
}
bandw = seq(from = 0.1, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
func_B <- function(x1, y1, nd, bandw, ntrial)
{
#   (1)
kscvgcv <- function(bw, x1 ,y1)
{
#   (2)
nd <- length(x1)
bwsplus <- bw/0.3708159
fit.ks <- ksmooth(x1, y1, "normal", bandwidth = bwsplus)
res <- y1 - fit.ks$y
#   (3)
dhat1 <- function(x2, bw)
{
nd2 <- length(x2)
diag1 <- diag(nd2)
bwsplus <- bw / 0.3708159
dhat <- rep(0, length = nd2)
#   (4)
for(jj in 1.:nd2) {
y2 <- diag1[, jj]
fit.ks <- ksmooth(x2, y2, "normal", bandwidth = bwsplus)
dhat[jj] <- fit.ks$y[jj]
}
return(dhat)
}
#   (5)
dhat <- dhat1(x1, bw)
trhat <- sum(dhat)
sse <- sum(res^2.)
#   (6)
cv <- sum((res/(1. - dhat))^2.)/nd
gcv <- sse/(nd * (1. - (trhat/nd))^2.)
#   (7)
return(c(cv, gcv))
}
#   (8)
cvgcv <- lapply(as.list(bandw), kscvgcv, x1 = x1, y1 = y1)
cvgcv <- unlist(cvgcv)
cv <- cvgcv[seq(from = 1, to = 2*length(bandw), by = 2)]
gcv <- cvgcv[seq(from = 2, to = 2*length(bandw), by = 2)]
#   (9)
retval <- list()
retval$cv <- cv
retval$gcv <- gcv
return(retval)
}
bandw = seq(from = 0.1, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
bandw = seq(from = 0.2, to = 1, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
bandw = seq(from = 0.2, to = 3, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ㄱㄷㅅ
ret
bandw = seq(from = 0.3, to = 3, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
bandw = seq(from = 1, to = 5, by = 0.01)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
bandw = seq(from = 1, to = 10, by = 0.1)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
bandw
ret
bandw = seq(from = 1, to = 100, by = 0.1)
x = seq(1,20)
y = my_func(x)
ret <- func_B(x, y, length(x), bandw, 0)
ret
ret$cv[ret$cv == min(ret$cv)]
ret$cv == min(ret$cv)
which(ret$cv == min(ret$cv))
cv_idx <- which(ret$cv == min(ret$cv))
gcv_idx <- which(ret$gcv == min(ret$gcv))
gcv_idx
cv_idx <- which(ret$cv == min(ret$cv))
gcv_idx <- which(ret$gcv == min(ret$gcv))
min_bw_cv <- bandw[cv_idx]
min_bw_gcv <- bandw[gcv_idx]
min_bw_cv
min_bw_gcv
draw_nadaraya(x, my_func, bw = min_bw_cv)
draw_nadaraya(x, my_func, bw = min_bw_gcv)
