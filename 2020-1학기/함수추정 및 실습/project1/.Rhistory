return(res)
}
full_test_kfold <- function(estimate_func, xdata, ydata, smtparam_array, k, description = "", using_CV = TRUE)
{
remain_x <- xdata[252:263]
remain_y <- ydata[252:263]
xdata_excepted <- xdata[1:251]
ydata_excepted <- ydata[1:251]
if(using_CV){
cv_array <- get_kfold_cross_validation(estimate_func, xdata_excepted, ydata_excepted, smtparam_array, k)
plot_cv(smtparam_array, cv_array, description)
smt_idx <- which(cv_array == min(cv_array, na.rm = TRUE))
best_smt <- smtparam_array[smt_idx]
}
else
{
best_smt <- smtparam_array[1]
}
plot_graph(estimate_func, xdata, ydata, best_smt, description = description)
rss <- get_predict_err(estimate_func, xdata_excepted, ydata_excepted, best_smt, remain_x, remain_y)
return(rss)
}
xdata <- seq(1,10)
x1 <-seq(11,20)
c(xdata,x1)
?ksmooth
?supsmu
fit.su <- supsmu(data$X, data$GBP)
fit.su
throw()
throw(this)
stop
stop()
stop("asd")
estimate_func_super_smoother_default <- function(xdata, ydata, sp = 0, estim_x = NULL)
{
fit.su <- supsmu(xdata, ydata, span = "cv")
if(is.null(estim_x))
{
ey <- fit.su$y
}
else
{
stop("super smoother can't predict!")
}
return(ey)
}
estimate_func_super_smoother <- function(xdata, ydata, sp, estim_x = NULL)
{
fit.su <- supsmu(xdata, ydata, span = sp)
if(is.null(estim_x))
{
ey <- fit.su$y
}
else
{
stop("super smoother can't predict!")
}
return(ey)
}
full_test(estimate_func_super_smoother_default, data$X, data$GBP, c(0), description = "loess method using linear polynomial, GBP")
full_test(estimate_func_super_smoother_default, data$X, data$GBP, c(0), description = "supersmoother method using default span, GBP")
full_test(estimate_func_super_smoother_default, data$X, data$CHF, c(0), description = "supersmoother method using default span, CHF")
full_test(estimate_func_super_smoother_default, data$X, data$CAD, c(0), description = "supersmoother method using default span, CAD")
full_test(estimate_func_super_smoother_default, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, GBP")
full_test(estimate_func_super_smoother_default, data$X, data$CHF, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CHF")
full_test(estimate_func_super_smoother_default, data$X, data$CAD, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CAD")
cv_array <- cv
cv_array <- c(1,1,2,2)
which(cv_array = min(cv_array, na.rm = TRUE))
which(cv_array == min(cv_array, na.rm = TRUE))
?which
?which.min
full_test <- function(estimate_func, xdata, ydata, smtparam_array, description = "", using_CV = TRUE)
{
if(using_CV){
cv_array <- get_cross_validation(estimate_func, xdata, ydata, smtparam_array)
plot_cv(smtparam_array, cv_array, description)
smt_idx <- which(cv_array == min(cv_array, na.rm = TRUE))
if(length(smt_idx) > 1)
{
smt_idx <- smt_idx[1]
}
best_smt <- smtparam_array[smt_idx]
}
else
{
best_smt <- smtparam_array[1]
}
plot_graph(estimate_func, xdata, ydata, best_smt, description = description)
rss <- get_RSS(estimate_func, xdata, ydata, best_smt)
return(rss)
}
full_test(estimate_func_super_smoother_default, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, GBP")
full_test(estimate_func_super_smoother_default, data$X, data$CHF, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CHF")
full_test(estimate_func_super_smoother_default, data$X, data$CAD, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CAD")
full_test(estimate_func_loess_linear, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, GBP")
full_test(estimate_func_loess_linear, data$X, data$CHF, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CHF")
full_test(estimate_func_loess_linear, data$X, data$CAD, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, CAD")
full_test(estimate_func_super_smoother, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "loess method using linear polynomial, GBP")
?lowess
lowess(data$X, data$GBP)
estimate_func_lowess <- function(xdata, ydata, sp, estim_x = NULL)
{
fit.low <- lowess(xdata, ydata, f = sp)
if(is.null(estim_x))
{
ey <- fit.low$y
}
else
{
stop("lowess can't predict!")
}
return(ey)
}
full_test(estimate_func_super_lowess, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "lowess method, GBP")
full_test(estimate_func_lowess, data$X, data$GBP, seq(from = 0.02, to = 0.3, by = 0.01), description = "lowess method, GBP")
full_test(estimate_func_lowess, data$X, data$CHF, seq(from = 0.02, to = 0.3, by = 0.01), description = "lowess method, CHF")
full_test(estimate_func_lowess, data$X, data$CAD, seq(from = 0.02, to = 0.3, by = 0.01), description = "lowess method, CAD")
full_test_kfold(estimate_nadaraya, data$X, data$GBP, seq(0.1,3,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
estimate_nadaraya <- function(xdata, ydata, bw, estim_x = NULL)
{
bwsplus <- bw/0.3708159
if(is.null(estim_x))
{
fit.ks <- ksmooth(xdata, ydata, "normal", bandwidth = bwsplus, x.points = xdata)
}
else
{
fit.ks <- ksmooth(xdata, ydata, "normal", bandwidth = bwsplus, x.points = estim_x)
}
return(fit.ks$y)
}
full_test_kfold(estimate_nadaraya, data$X, data$GBP, seq(0.1,3,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
xdata <- data$X
ydata <- data$GBP
remain_x <- xdata[252:263]
remain_y <- ydata[252:263]
xdata_excepted <- xdata[1:251]
ydata_excepted <- ydata[1:251]
estimate_func <- estimate_nadaraya
cv_array <- get_kfold_cross_validation(estimate_func, xdata_excepted, ydata_excepted, smtparam_array, k)
smtparam_array <- seq(0.1,3, by = 0.1)
k <- 10
cv_array <- get_kfold_cross_validation(estimate_func, xdata_excepted, ydata_excepted, smtparam_array, k)
cv_array
get_kfold_cross_validation <- function(estimate_func, x1, y1, smtparam_array, k)
{
#   (1)
get_kfold_cv <- function(smtparam,estimate_func, x1 ,y1, k)
{
#   (2)
cv <- 0
nd <- length(x1)
idx_lst <- get_fold_seq(k, nd)
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
cv <- cv / k
#   (7)
return(cv)
}
#   (8)
cvlst <- lapply(as.list(smtparam_array),get_kfold_cv,  estimate_func = estimate_func, x1 = x1, y1 = y1, k = k)
cvlst <- unlist(cvlst)
return(cvlst)
}
cv_array <- get_kfold_cross_validation(estimate_func, xdata_excepted, ydata_excepted, smtparam_array, k)
get_kfold_cv <- function(smtparam,estimate_func, x1 ,y1, k)
{
#   (2)
cv <- 0
nd <- length(x1)
idx_lst <- get_fold_seq(k, nd)
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
cv <- cv / k
#   (7)
return(cv)
}
get_kfold_cv(1,estimate_nadaraya, xdata, ydata, 10)
idx_lst <- get_fold_seq(k, nd)
cv <- 0
nd <- length(xdata)
idx_lst <- get_fold_seq(k, sd)
idx_lst <- get_fold_seq(k, nd)
idx_lst
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
x1 <- data$X
y1 <- data$GBP
cv <- 0
nd <- length(x1)
idx_lst <- get_fold_seq(k, nd)
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
smtparam = 1
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
cv
x1[-idx_lst[[1]]]
y1[-idx_lst[[1]]]
remain_xdata <- x1[idx_lst[[1]]]
remain_ydata <- y1[idx_lst[[1]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
estim_y
sum((remain_ydata - estim_y)**2)
sum((remain_ydata - estim_y)**2)/length(remain_xdata)
for(i in seq_len(5)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
cv
xdata <- x1[-idx_lst[[2]]]
ydata <- y1[-idx_lst[[2]]]
remain_xdata <- x1[idx_lst[[2]]]
remain_ydata <- y1[idx_lst[[2]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
estim_y
fit.ks <- ksmooth(xdata, ydata, "normal", bandwidth = bwsplus, x.points = estim_x)
fit.ks
fit.ks <- ksmooth(xdata, ydata, "normal", bandwidth = bwsplus, x.points = data$X)
fit.fs$y
fit.ks$y
full_test_kfold(estimate_nadaraya, data$X, data$GBP, seq(1,3,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
full_test_kfold(estimate_nadaraya, data$X, data$GBP, seq(3,10,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
full_test_kfold(estimate_nadaraya, data$X, data$CHF, seq(3,10,by = 0.1), k = 10, description = "nadaraya-watson method, CHF")
full_test_kfold(estimate_nadaraya, data$X, data$CAD, seq(3,10,by = 0.1), k = 10, description = "nadaraya-watson method, CAD")
full_test(estimate_nadaraya, data$X, data$GBP, seq(0.1,3,by = 0.1), description = "nadaraya-watson method, GBP")
library(KernSmooth)
locpoly(data$X, data$GBP)
locpoly(data$X, data$GBP, bandwidth = 0.25)
locpoly(data$X, data$GBP, bandwidth = 0.25, gridsize = length(data$X))
locpoly(data$X, data$GBP, bandwidth = 0.25, gridsize = length(data$X), degree = 1)
locpoly(data$X, data$GBP, bandwidth = 0.25, gridsize = length(data$X), degree = 1)
ac <- locpoly(data$X, data$GBP, bandwidth = 0.25, gridsize = length(data$X), degree = 1)
line(ac)
library(locfit)
locpol(data$X, data$CAD)
locfit(data$X, data$CAD)
data
?locfit
locfit(GBP ~ lp(X), data)
lf <- locfit(GBP ~ lp(X), data)
lf
predict(lf,c(1))
install.packages(locpol)
install.packages("locpol")
library(locpol)
df <- data.frame(x = xdata, y = ydata)
df
lp.fit <- locpol(y ~ x,df, bw = 1, kernel = gaussK, deg = 1)
lp.fit
preidct(lp.fit)
predict(lp.fit)
attributes(lp.fit)
lp.fit$Y
fitted(lp.fit)
lp.fit <- locpol(y ~ x,df, bw = 1, kernel = gaussK, deg = 1, xeval = df$x)
lp.fit
fitted(lp.fit)
df$x
df$y
lp.fit <- locpol(y ~ x,df, bw = 1, kernel = gaussK, deg = 1, xeval = c(1,2,3))
fitted(lp.fit)
lp.fit <- locpol(y ~ x,df, bw = 1, kernel = gaussK, deg = 1, xeval = c(300))
lp.fit <- locpol(y ~ x,df, bw = 1, kernel = gaussK, deg = 1, xeval = c(250))
fitted(lp.fit)
?locpol
estimate_local_linear <- function(xdata, ydata, bw, estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
if(is.null(estim_x))
{
lp.fit <- locpol(y ~ x,df, bw = bw, kernel = gaussK, deg = 1, xeval = df$x)
}
else
{
lp.fit <- locpol(y ~ x,df, bw = bw, kernel = gaussK, deg = 1, xeval = estim_x)
}
ey <- fitted(lp.fit)
return(ey)
}
full_test(estimate_local_linear, data$X, data$GBP, seq(0.1,3,by = 0.1), description = "local-linear method, GBP")
estimate_local_linear <- function(xdata, ydata, bw, estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
if(is.null(estim_x))
{
lp.fit <- locpol(y ~ x,df, bw = bw, kernel = gaussK, deg = 1, xeval = df$x)
}
else
{
lp.fit <- locpol(y ~ x,df, bw = bw, kernel = gaussK, deg = 1, xeval = estim_x)
}
ey <- fitted(lp.fit)
return(ey)
}
full_test(estimate_local_linear, data$X, data$GBP, seq(1,3,by = 0.1), description = "local-linear method, GBP")
full_test(estimate_local_linear, data$X, data$GBP, seq(0.1,1.5,by = 0.1), description = "local-linear method, GBP")
full_test(estimate_local_linear, data$X, data$GBP, seq(1,2,by = 0.1), description = "local-linear method, GBP")
full_test(estimate_local_linear, data$X, data$GBP, seq(0.3,2,by = 0.1), description = "local-linear method, GBP")
full_test_kfold(estimate_local_linear, data$X, data$GBP, seq(3,10,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
full_test_kfold(estimate_local_linear, data$X, data$GBP, seq(3,13,by = 0.1), k = 10, description = "nadaraya-watson method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(3,13,by = 0.1), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(3,10,by = 0.1), k = 10, description = "smoothing spline method, GBF")
get_kfold_cross_validation <- function(estimate_func, x1, y1, smtparam_array, k)
{
#   (1)
get_kfold_cv <- function(smtparam,estimate_func, x1 ,y1, k)
{
#   (2)
cv <- 0
nd <- length(x1)
idx_lst <- get_fold_seq(k, nd)
for(i in seq_len(k)) # get CV_(j) and sum to cv
{
xdata <- x1[-idx_lst[[i]]]
ydata <- y1[-idx_lst[[i]]]
remain_xdata <- x1[idx_lst[[i]]]
remain_ydata <- y1[idx_lst[[i]]]
estim_y <- estimate_func(xdata, ydata, smtparam, remain_xdata)
cv <- cv + sum((remain_ydata - estim_y)**2)/length(remain_xdata)
}
cv <- cv / k
#   (7)
return(cv)
}
#   (8)
cvlst <- lapply(as.list(smtparam_array),get_kfold_cv,  estimate_func = estimate_func, x1 = x1, y1 = y1, k = k)
cvlst <- unlist(cvlst)
return(cvlst)
}
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(3,10,by = 0.1), k = 10, description = "smoothing spline method, GBF")
estimate_smoothing_spline <- function(xdata, ydata, lamb, estim_x = NULL)
{
if(is.null(estim_x))
{
fit.sp <- smooth.spline(xdata, ydata, lambda = lamb, all.knots = TRUE)
pred <- predict(fit.sp, xdata)
}
else
{
fit.sp <- smooth.spline(xdata, ydata, lambda = lamb, all.knots = TRUE)
pred <- predict(fit.sp, estim_x)
}
return(pred$y)
}
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(3,10,by = 0.1), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(1,10,by = 0.1), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CAD, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.001,1,by = 0.001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.0001,0.03,by = 0.0001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.000001,0.000003,by = 0.000001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.000001,0.00003,by = 0.000001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.000001,0.0001,by = 0.000001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.000003,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CAD, seq(0.01,1,by = 0.01), k = 10, description = "smoothing spline method, CAD")
wjrfull_test_kfold(estimate_smoothing_spline, data$X, data$CAD, seq(0.000003,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_smoothing_spline, data$X, data$CAD, seq(0.000003,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(0.000003,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$GBP, seq(0.000001,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CHF, seq(0.000001,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_smoothing_spline, data$X, data$CAD, seq(0.000001,0.0003,by = 0.000001), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_local_linear, data$X, data$CAD, seq(3,13,by = 0.1), k = 10, description = "local linear method, CAD")
full_test_kfold(estimate_local_linear, data$X, data$CAD, seq(3,15,by = 0.1), k = 10, description = "local linear method, CAD")
full_test_kfold(estimate_local_linear, data$X, data$CHF, seq(3,15,by = 0.1), k = 10, description = "local linear method, CHF")
full_test_kfold(estimate_local_linear, data$X, data$GBP, seq(3,15,by = 0.1), k = 10, description = "local linear method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,20,by = 2), k = 10, description = "smoothing spline method, GBF")
estimate_natural_spline_binomfilter <- function(xdata, ydata, m, estim_x = NULL)
{
biny <- binom1(ydata, m)
if(is.null(estim_x))
{
exy <- spline(xdata, biny, method = 'natural', xout = xdata)
}
else
{
exy <- spline(xdata, biny, method = 'natural', xout = estim_x)
}
return(exy$y)
}
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,20,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,20,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,40,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,40,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CAD, seq(2,40,by = 2), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,40,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,50,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,50,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CAD, seq(2,50,by = 2), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,60,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,60,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CAD, seq(2,60,by = 2), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,100,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,100,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CAD, seq(2,100,by = 2), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$GBP, seq(2,20,by = 2), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CHF, seq(2,20,by = 2), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_natural_spline_binomfilter, data$X, data$CAD, seq(2,20,by = 2), k = 10, description = "smoothing spline method, CAD")
estimate_func_loess_linear <- function(xdata, ydata, sp, estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
fit.lo <- loess(y ~ x, data = df, span = sp, family = "gaussian", degree = 1, surface = "direct")
if(is.null(estim_x))
{
ey <- predict(fit.lo)
}
else
{
ey <- predict(fit.lo, estim_x)
}
return(ey)
}
estimate_func_loess_quad <- function(xdata, ydata, sp,  estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
fit.lo <- loess(y ~ x, data = df, span = sp, family = "gaussian", degree = 2, surface = "direct")
if(is.null(estim_x))
{
ey <- predict(fit.lo)
}
else
{
ey <- predict(fit.lo, estim_x)
}
return(ey)
}
full_test_kfold(estimate_loess_linear , data$X, data$GBP, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_loess_linear , data$X, data$GBP, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_loess_linear, data$X, data$CHF, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_loess_linear, data$X, data$CAD, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, CAD")
estimate_loess_linear <- function(xdata, ydata, sp, estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
fit.lo <- loess(y ~ x, data = df, span = sp, family = "gaussian", degree = 1, surface = "direct")
if(is.null(estim_x))
{
ey <- predict(fit.lo)
}
else
{
ey <- predict(fit.lo, estim_x)
}
return(ey)
}
estimate_loess_quad <- function(xdata, ydata, sp,  estim_x = NULL)
{
df <- data.frame(x = xdata, y = ydata)
fit.lo <- loess(y ~ x, data = df, span = sp, family = "gaussian", degree = 2, surface = "direct")
if(is.null(estim_x))
{
ey <- predict(fit.lo)
}
else
{
ey <- predict(fit.lo, estim_x)
}
return(ey)
}
full_test_kfold(estimate_loess_linear , data$X, data$GBP, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_loess_linear, data$X, data$CHF, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_loess_linear, data$X, data$CAD, seq(0.01,0.3,by = 0.01), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_loess_linear , data$X, data$GBP, seq(0.02,0.3,by = 0.01), k = 10, description = "smoothing spline method, GBF")
full_test_kfold(estimate_loess_linear, data$X, data$CHF, seq(0.02,0.3,by = 0.01), k = 10, description = "smoothing spline method, CHF")
full_test_kfold(estimate_loess_linear, data$X, data$CAD, seq(0.02,0.3,by = 0.01), k = 10, description = "smoothing spline method, CAD")
full_test_kfold(estimate_loess_quad , data$X, data$GBP, seq(0.03,0.3,by = 0.01), k = 10, description = "loess linear method, GBF")
full_test_kfold(estimate_loess_quad, data$X, data$CHF, seq(0.03,0.3,by = 0.01), k = 10, description = "loess linear method, CHF")
full_test_kfold(estimate_loess_quad, data$X, data$CAD, seq(0.03,0.3,by = 0.01), k = 10, description = "loess linear method, CAD")
