coef(sim1_mod)
sim1_mod
sim1 %>% data_grid()
sim1 %>% data_grid(x)
sim1
sim1 %>% data_grid(x,y)
sim1 %>% data_grid(y)
grid
grid <- data_grid(sim1, x)
grid
grid <- grid %>% add_predictions(sim1_mod)
grid
ggplot(sim1, aes(x)) +
geom_point(aes(y = y)) +
geom_line(aes(y = pred), data = grid, colour = "red", size = 1)
sim1 <- sim1 %>%
add_residuals(sim1_mod)
sim1
ggplot(sim1, aes(resid)) + geom_freqpoly(binwidth = 0.5)
ggplot(sim1, mapping = aes(x, resid)) + geom_point()
ggplot(sim1, mapping = aes(x, resid)) + geom_point() + geom_ref_line(h = 0)
df <- tribble(
~y, ~x1, ~x2
4,2,5
df <- tribble(
~y, ~x1, ~x2
4,2,5,
df <- tribble(
~y, ~x1, ~x2,
4,2,5,
5,1,6)
model_matrix(df, y ~ x1)
model_matrix(df, y ~ x1 + x2)
model_matrix(df, y ~ x1 + x2 - 1)
df <- tribble(
~ sex, ~ response,
"male", 1,
"female", 2,
"male", 1
)
model_matrix(df, y ~ sex)
model_matrix(df, response ~ sex)
ggplot(sim2) + geom_point(aes(x,y))
sim2
mod2 <- lm(y ~ x, data = sim2)
mod2
grid <- sim2 %>% data_grid(x) %>% add_predictions(mod2)
grid
ggplot(sim2, aes(x)) + geom_point(aes(y = y)) + geom_point(data = grid, aes(y = pred), colour = "red", size = 4)
sim3
ggplot(sim3, aes(x1, y)) + geom_point(aes(color = x2))
mod1 <- lm(y ~ x1 + x2, data = sim3)
mod2 <- lm(y ~ x1 * x2, data = sim3)
mod2
mod1
data_grid(x1, x2)
data_grid(sim3 ,x1, x2)
grid <- data_grid(sim3 ,x1, x2) %>% gather_predictions(mod1,mod2)
grid
grid
ggplot(sim3, aes(x1, y, colour = x2)) + geom_point() + geom_line(data = grid, aes(y = pred)) + facet_wrap(~ model)
sim3 <- sim3 %>%
gather_residuals(mod1, mod2)
ggplot(sim3, aes(x1, resid, colour = x2)) +
geom_point() +
facet_grid(model ~ x2)
sim4
mod1 <- lm(y ~ x1 + x2 , data = sim4)
mod2 <- lm(y ~ x1 * x2 , data = sim4)
grid <- sim4 %>%
data_grid(x1 = seq_range(x1, 5),
x2 = seq_range(x2, 5)) %>%
gather_predictions(mod1, mod2)
grid
ggplot(grid, aes(x1, x2)) + geom_tile(aes(fill = pred)) + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2, group = x2)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2, group = x2)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2, group = x1)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2, group = pred)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x1 , pred, color = x2, group = x2)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x2, pred, color = x1 , group = x1)) + geom_lie() + facet_wrap(~ model)
ggplot(grid, aes(x2, pred, color = x1 , group = x1)) + geom_line() + facet_wrap(~ model)
ggplot(grid, aes(x2, pred, color = x1 , group = x1)) + geom_line() + facet_wrap(~ model)
df <- tribble(
~y, ~x,
1,  1,
2,  2,
3,  3
)
model_matrix(df, y ~ x^2 + x)
model_matrix(df, y ~ I(x^2) + x)
library(splines)
model_matrix(df, y ~ ns(x, 2))
sim5 <- tibble(
x = seq(0, 3.5 * pi, length = 50),
y = 4 * sin(x) + rnorm(length(x))
)
ggplot(sim5, aes(x, y)) +
geom_point()
mod1 <- lm(y ~ ns(x, 1), data = sim5)
mod2 <- lm(y ~ ns(x, 2), data = sim5)
mod3 <- lm(y ~ ns(x, 3), data = sim5)
mod4 <- lm(y ~ ns(x, 4), data = sim5)
mod5 <- lm(y ~ ns(x, 5), data = sim5)
grid <- sim5 %>%
data_grid(x = seq_range(x, n = 50, expand = 0.1)) %>%
gather_predictions(mod1, mod2, mod3, mod4, mod5, .pred = "y")
ggplot(sim5, aes(x, y)) +
geom_point() +
geom_line(data = grid, colour = "red") +
facet_wrap(~ model)
?ns
data(iris)
swidth.versicolor <- NULL
for (i in seq_len(nrow(iris)) ) {
if (iris$Species[i]=="versicolor") {
swidth.versicolor <- c(swidth.versicolor, iris$Sepal.Width[i])
}
}
seq_len(nrow(iris))
swidth.versicolor
?map
?filter
?filter
iris %>% filter(Species == "versicolor")
swswidth.versicolor <- NULL
swidth.versicolor <- iris %>% filter(Species == "versicolor") %>% select(Width)
swidth.versicolor <- NULL
swidth.versicolor <- iris %>% filter(Species == "versicolor") %>% select(Width)
data(iris)
swidth.versicolor <- NULL
swidth.versicolor <- iris %>% filter(Species == "versicolor") %>% select(Width)
data(iris)
swidth.versicolor <- NULL
swidth.versicolor <- iris %>% filter(Species == "versicolor") %>% select(Sepal.Width)
data(iris)
swidth.versicolor <- NULL
for (i in seq_len(nrow(iris)) ) {
if (iris$Species[i]=="versicolor") {
swidth.versicolor <- c(swidth.versicolor, iris$Sepal.Width[i])
}
}
data(iris)
my_swidth.versicolor <- NULL
my_swidth.versicolor <- iris %>% filter(Species == "versicolor") %>% select(Sepal.Width)
diff = my_swidth.versicolor - swidth.versicolor
diff
data(iris)
head(iris$Sepal.Length[iris$Species])
iris$Sepal.Length[iris$Species]
iris$Species
str(iris$Species)
levels(iris$Species)
as.integer(iris$Species)
?`[]`
?[
?`[`
iris$Sepal.Length[iris$Species]
iris$Sepal.Length[1]
iris$Sepal.Length[2]
iris$Sepal.Length[3]
?head
head(iris$Sepal.Length[iris$Species])
mod2_modify <- lm(y ~ x - 1, data = sim2)
mod2_modify
mod2_modify <- lm(y ~ x , data = sim2)
mod2 <- lm(y ~ x , data = sim2)
mod2_modify <- lm(y ~ x - 1, data = sim2)
mod2
sim2
model_matrix(sim2, mod2)
model_matrix(sim2, mod2_modify)
View(model_matrix(sim2, mod2))
View(model_matrix(sim2, mod2_modify)
)
grid <- sim2 %>%
data_grid(x) %>%
spread_predictions(mod2,mod2_modify)
grid
mod2
mod2_modify
coef(mod2)
coef(mod2_modify)
coef(mod2)
coef(mod2_modify)
?runif
x <- runif(1000, 0, 30)
y <- runif(1000, 0, 50)
x
y
FL
x <- runif(1000, 0, 30)
y <- runif(1000, 0, 50)
FL <- list(x,y)
FL
FL[1]
FL[2]
FL <- tibble(x = x, y = y)
FL
pi/2
y <- runif(0, 0.5)
theta <- runif(0, pi/2)
y
y <- runif(1000, 0, 0.5)
theta <- runif(1000, 0, pi/2)
is_meet_line <- (y <= 0.25 * cos(theta))
is_meet_line
sum(is_meet_line)
is_meet_line <- (y <= 0.25 * cos(theta))
num_meet_line <- sum(is_meet_line)
num_meet_line
prac <- num_meet_line/1000
prac
1/pi
library(nycflights13)
library(lubridate)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) + geom_hex(bins = 50)
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
diamonds2 <- diamonds %>%
filter(carat <= 2.5) %>%
mutate(lprice = log2(price), lcarat = log2(carat))
ggplot(diamonds2, aes(lcarat, lprice)) + geom_hex(bins = 50)
mod_diamond <- lm(lprice ~ lcarat, data = diamonds2)
mod_diamond
grid <- diamonds2 %>% data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(pirce = 2 ^ lprice)
ggplot(diamonds, aes(carat, pirce)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
ggplot(diamonds, aes(carat, price)) +
+ geom_hex(bins = 50) +
+ geom_line(data = grid, colour = "red", size = 1)
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
ggplot(diamonds, aes(carat, pirce)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
grid <- diamonds2 %>%
data_grid(carat = seq_range(carat, 20)) %>%
mutate(lcarat = log2(carat)) %>%
add_predictions(mod_diamond, "lprice") %>%
mutate(price = 2 ^ lprice)
ggplot(diamonds2, aes(carat, price)) +
geom_hex(bins = 50) +
geom_line(data = grid, colour = "red", size = 1)
diamonds2 <- diamonds2 %>%
add_residuals(mod_diamond, "lresid")
ggplot(diamonds2, aes(lcarat, lresid)) + geom_hex(bins = 50)
ggplot(diamonds2, aes(cut, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(color, lresid)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, lresid)) + geom_boxplot()
mod_diamond2 <- lm(lprice ~ lcarat + color + cut + clarity, data = diamonds2)
grid <- diamonds2 %>%
data_grid(cut, .model = mod_diamond2) %>%
add_predictions(mod_diamond2)
data_grid(diamonds2, cut, .model = mod_diamond2)
?data_grid
ggplot(grid, aes(cut, pred)) + geom_point()
diamonds2 <- diamonds2 %>% add_residuals(mod_diamond2, "lresid2")
diamonds2
ggplot(diamonds2, aes(lcarat, lresid2)) +
geom_hex(bins = 50)
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamond2) %>%
mutate(pred = round(2 ^ pred)) %>%
select(price, pred, carat::table, x:z) %>%
arrange(price)
diamonds2 %>%
filter(abs(lresid2) > 1) %>%
add_predictions(mod_diamond2) %>%
mutate(pred = round(2 ^ pred)) %>%
select(price, pred, carat:table, x:z) %>%
arrange(price)
my_mod <- lm(log2(price) ~ log2(carat), data = diamonds)
my_mod
log(e)
log(1)
log(10)
log(E)
e
log(exp(1))
daily <- flights %>%
mutate(date = make_date(year, month, day)) %>%
group_by(date) %>%
summarise(n = n())
daily
ggplot(daily, aes(date, n))
ggplot(daily, aes(date, n)) + geom_line()
daily <- daily %>%
mutate(wday = wday(date, label = TRUE))
ggplot(daily, aes(wday, n)) + geom_boxplot()
mod <- lm(n ~ wday, data = daily)
grid <- daily %>%
data_grid(wday) %>%
add_predictions(mod, "n")
ggplot(daily, aes(wday, n)) +
geom_boxplot() + geom_point(data = grid, color = "red", size = 4)
daily <- daily %>%
add_residuals(mod)
daily <- daily %>% add_residuals(mod)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line()
ggplot(daily, aes(date, resid, color = wday)) +
geom_line() +
geom_ref_line(h = 0)
daily %>%
filter(resid < -100)
aily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line(colour = "grey50") +
geom_smooth(se = FALSE, span = 0.20)
daily %>%
ggplot(aes(date, resid)) +
geom_ref_line(h = 0) +
geom_line(colour = "grey50") +
geom_smooth(se = FALSE, span = 0.20)
daily %>% filter(wday == "í† ") %>%
ggplot(aes(date, n)) + geom_point() +
geom_line() + scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
term <- function(date) {
cut(date,
breaks = ymd(20130101, 20130605, 20130825, 20140101),
labels = c("spring", "summer", "fall")
)
}
daily <- daily %>% mutate(term = term(date))
daily %>%
filter(wday == "Sat") %>%
ggplot(aes(date, n , color = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
daily %>%
filter(wday == "Sat") %>%
ggplot(aes(date, n, colour = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
term <- function(date) {
cut(date,
breaks = ymd(20130101, 20130605, 20130825, 20140101),
labels = c("spring", "summer", "fall")
)
}
daily <- daily %>%
mutate(term = term(date))
daily %>%
filter(wday == "Sat") %>%
ggplot(aes(date, n, colour = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
term <- function(date) {
cut(date,
breaks = ymd(20130101, 20130605, 20130825, 20140101),
labels = c("spring", "summer", "fall")
)
}
daily <- daily %>%
mutate(term = term(date))
daily %>%
filter(wday == "í† ") %>%
ggplot(aes(date, n, colour = term)) +
geom_point(alpha = 1/3) +
geom_line() +
scale_x_date(NULL, date_breaks = "1 month", date_labels = "%b")
daily %>%
ggplot(aes(wday, n, colour = term)) +
geom_boxplot()
mod1 <- lm(n ~ wday, data = daily)
mod2 <- lm(n ~ wday * term, data = daily)
daily %>%
gather_residuals(without_term = mod1, with_term = mod2) %>%
ggplot(aes(date, resid, colour = model)) +
geom_line(alpha = 0.75)
grid <- daily %>%
data_grid(wday, term) %>%
add_predictions(mod2, "n")
grid
ggplot(daily, aes(wday, n)) +
geom_boxplot() +
geom_point(data = grid, color = "red") +
facet_wrap(~ term)
mod3 <- MASS::rlm(n ~ wday * term, data = daily)
daily %>%
add_residuals(mod3, "resid") %>%
ggplot(aes(date, resid)) +
geom_hline(yintercept = 0, size = 2, colour = "white") +
geom_line()
compute_vars <- function(data) {
data %>%
mutate(
term = term(date),
wday = wday(date, label = TRUE)
)
}
library(splines)
mod <- MASS::rlm(n ~ wday * ns(date, 5), data = daily)
daily %>%
data_grid(wday, date = seq_range(date, n = 13)) %>%
add_predictions(mod) %>%
ggplot(aes(date, pred, color = wday)) +
geom_line() +
geom_point()
daily <- daily %>%
mutate(wday = wday(date, label = TRUE))
mod <- lm(n ~ wday, data = daily)
daily <- daily %>%
add_residuals(mod)
term <- function(date) {
cut(date,
breaks = ymd(20130101, 20130605, 20130825, 20140101),
labels = c("spring", "summer", "fall")
)
}
daily <- daily %>%
mutate(term = term(date))
mod1 <- lm(n ~ wday, data = daily)
mod2 <- lm(n ~ wday * term, data = daily)
daily %>%
gather_residuals(without_term = mod1, with_term = mod2)
daily %>%
top_n(3, resid)
mod
daily %>%
top_n(10, resid)
?top_n
daily %>%
top_n(3, resid)
daily %>%
top_n(5, resid)
daily %>%
top_n(10, resid)
daily %>%
top_n(30, resid)
daily %>%
top_n(15, resid)
daily %>%
top_n(20, resid)
daily %>% filter(date > ymd("2013-12-25"))
daily %>% filter(date > ymd("2013-12-24"))
daily %>% filter(date > ymd("2013-12-23"))
?cor
u <- c(-10, 0, 10, 100)
map(u, function(x) rnorm(n = 10, mean = x))
library(tidyverse)
u <- c(-10, 0, 10, 100)
map(u, function(x) rnorm(n = 10, mean = x))
new_col_sum3 <- function(df, f) {
is_num <- map_lgl(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
new_col_sum3(df, mean)
new_col_sum3(df[1:2], mean)
new_col_sum3(df[1], mean)
new_col_sum3(df[0], mean)
df <- tibble(
x = 1:3,
y = 3:1,
z = c("a", "b", "c")
)
new_col_sum3 <- function(df, f) {
is_num <- map_lgl(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
new_col_sum3(df, mean)
new_col_sum3(df[1:2], mean)
new_col_sum3(df[1], mean)
new_col_sum3(df[0], mean)
new_col_sum3 <- function(df, f) {
is_num <- map_lgl(df, is.numeric)
df_num <- df[, is_num]
unlist(map(df_num, f))
}
new_col_sum3(df, mean)
new_col_sum3(df[1:2], mean)
new_col_sum3(df[1], mean)
new_col_sum3(df[0], mean)
unlist(list())
new_col_sum3 <- function(df, f) {
is_num <- map_lgl(df, is.numeric)
df_num <- df[, is_num]
sapply(df_num, f)
}
new_col_sum3(df, mean)
new_col_sum3(df[1:2], mean)
new_col_sum3(df[1], mean)
new_col_sum3(df[0], mean)
map_col_sum3 <- function(df, f) {
is_num <- map_lgl(df, is.numeric)
df_num <- df[, is_num]
unlist(map(df_num, f))
}
map_col_sum3(df, mean)
map_col_sum3(df[1:2], mean)
map_col_sum3(df[1], mean)
map_col_sum3(df[0], mean)
